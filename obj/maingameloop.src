; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\..\..\..\..\PIEMAN~1\DESKTOP\CECDEV\CC22\SRC\MAINGAMELOOP.C"
	.assume ADL=1
	SEGMENT BSS
_goleft:
	DS	3
_goright:
	DS	3
_goup:
	DS	3
_godown:
	DS	3
	SEGMENT DATA
_spritexoffset:
	DW	160
	DB	0
_spriteyoffset:
	DW	128
	DB	0
	SEGMENT BSS
_playerface:
	DS	3
;    1	#include "menuandeditfunctions.h"
;    2	#include "maingameloop.h"
;    3	#include "collisiondetection.h"
;    4	#include "gfx/dungeon_gfx.h"
;    5	#include "gfx/tiles_gfx.h"
;    6	
;    7	#include <stdbool.h>
;    8	#include <stddef.h>
;    9	#include <stdint.h>
;   10	#include <tice.h>
;   11	
;   12	#include <math.h>
;   13	#include <setjmp.h>
;   14	#include <fileioc.h>
;   15	#include <stdio.h>
;   16	#include <stdlib.h>
;   17	#include <string.h>
;   18	#include <graphx.h>
;   19	#include <keypadc.h>
;   20	
;   21	int goleft;
;   22	int goright;
;   23	int goup;
;   24	int godown;
;   25	int spritexoffset = 160;
;   26	int spriteyoffset = 128;
;   27	//1=left,2=up,3=right,4=down
;   28	int playerface;
	SEGMENT CODE
;   29	
;   30	extern int menuyes;
;   31	extern int textcolor;
;   32	extern uint8_t tilemap_map[];
;   33	extern unsigned int x_offset;
;   34	extern unsigned int y_offset;
;   35	extern int mapshift;
;   36	extern uint8_t player_setup [8];
;   37	
;   38	extern gfx_tilemap_t tilemap;
;   39	
;   40	void maingameloop(void){
_maingameloop:
;   41	
;   42		do{
L_1:
;   43			(goleft = 0);
	LD	BC,0
	LD	(_goleft),BC
;   44			(goright = 0);
	LD	(_goright),BC
;   45			(goup = 0);
	LD	(_goup),BC
;   46			(godown = 0);
	LD	(_godown),BC
;   47			
;   48			setmapshift();
	CALL	_setmapshift
;   49			
;   50			drawmap();
	CALL	_drawmap
;   51			drawcharacter();
	CALL	_drawcharacter
;   52			mapshifter();
	CALL	_mapshifter
;   53		
;   54		} while (!((kb_Data[6] & kb_Clear)||(kb_Data[1] & kb_Yequ)));
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_3
	LD	A,(16056338)
	AND	A,16
	JR	Z,L_1
L_3:
;   55		menuyes = 3;
	LD	BC,3
	LD	(_menuyes),BC
;   56	}
	RET	


;**************************** _maingameloop ***************************
;Name                         Addr/Register   Size   Type
;_menuyes                            IMPORT      3   variable
;_mapshifter                         IMPORT  -----   function
;_drawcharacter                      IMPORT  -----   function
;_drawmap                            IMPORT  -----   function
;_setmapshift                        IMPORT  -----   function
;_godown                             STATIC      3   variable
;_goup                               STATIC      3   variable
;_goright                            STATIC      3   variable
;_goleft                             STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   57	
;   58	
;   59	void setmapshift(void) {
_setmapshift:
	LD	HL,-3
	CALL	__frameset
;   60		if (player_setup[2] == 0) {(mapshift = 1);}
	LD	IY,_player_setup
	LEA	IY,IY+2
	LD	(IX+-3),IY
	LD	HL,(IX+-3)
	LD	A,(HL)
	OR	A,A
	JR	NZ,L_7
	LD	BC,1
	LD	(_mapshift),BC
L_7:
;   61		if (player_setup[2] == 1) {(mapshift = 8);}
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_9
	LD	BC,8
	LD	(_mapshift),BC
L_9:
;   62		if (player_setup[2] == 2) {(mapshift = 16);}
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_11
	LD	BC,16
	LD	(_mapshift),BC
L_11:
;   63		if (player_setup[2] == 3) {(mapshift = 24);}
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,3
	SBC	HL,BC
	JR	NZ,L_13
	LD	BC,24
	LD	(_mapshift),BC
L_13:
;   64		if (player_setup[2] == 4) {(mapshift = 32);}
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,4
	SBC	HL,BC
	JR	NZ,L_14
	LD	BC,32
	LD	(_mapshift),BC
;   65	}
L_14:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _setmapshift ***************************
;Name                         Addr/Register   Size   Type
;_mapshift                           IMPORT      3   variable
;_player_setup                       IMPORT      8   variable
;G_0                                   IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   66		
;   67	void drawmap(void) {
_drawmap:
;   68	
;   69		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   70		gfx_SetPalette(tiles_gfx_pal, sizeof_tiles_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,_tiles_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   71		gfx_Tilemap(&tilemap, x_offset, y_offset);
	LD	BC,(_y_offset)
	PUSH	BC
	LD	BC,(_x_offset)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;   72		gfx_SetColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   73		gfx_FillRectangle(0,224,320,16);
	LD	BC,16
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,224
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   74		gfx_SetTextFGColor(textcolor);
	LD	A,(_textcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   75		gfx_PrintStringXY("x offset:", 8, 224);
	LD	BC,224
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   76		gfx_PrintUInt(x_offset, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,(_x_offset)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;   77		gfx_PrintString("  y offset:");
	LD	BC,L__10
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;   78		gfx_PrintUInt(y_offset, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,(_y_offset)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;   79		gfx_PrintString("  pface");
	LD	BC,L__11
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;   80		gfx_PrintInt(playerface,1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_playerface)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
;   81	}
	RET	


;**************************** _drawmap ***************************
;Name                         Addr/Register   Size   Type
;_playerface                         STATIC      3   variable
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_PrintString                    IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_textcolor                          IMPORT      3   variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_tilemap                            IMPORT     18   variable
;_x_offset                           IMPORT      3   variable
;_y_offset                           IMPORT      3   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_tiles_gfx_pal                      IMPORT    512   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__9:
	DB	"x offset:"
	DB	0
L__10:
	DB	"  y offset:"
	DB	0
L__11:
	DB	"  pface"
	DB	0
	SEGMENT CODE
;   82	
;   83	void mapshifter(void) {
_mapshifter:
;   84		if (kb_Data[7] & kb_Left) {
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_23
;   85			collisionleft();
	CALL	_collisionleft
;   86			if (goleft == 1) {
	LD	BC,1
	LD	HL,(_goleft)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_23
;   87				(playerface = 1);
	LD	(_playerface),BC
;   88				if (x_offset  == 0) {
	LD	HL,(_x_offset)
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_17
;   89					(x_offset = 0);
	LD	(_x_offset),BC
;   90				}
;   91				else {
	JR	L_23
L_17:
;   92					(x_offset = (x_offset - mapshift));
	LD	HL,(_x_offset)
	LD	BC,(_mapshift)
	OR	A,A
	SBC	HL,BC
	LD	(_x_offset),HL
;   93				}
;   94			}
;   95		}
L_23:
;   96		if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_27
;   97			collisionright();
	CALL	_collisionright
;   98			if (goright == 1){
	LD	BC,1
	LD	HL,(_goright)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_27
;   99				(playerface = 3);
	LD	BC,3
	LD	(_playerface),BC
;  100				(x_offset = (x_offset + mapshift));
	LD	BC,(_x_offset)
	LD	HL,(_mapshift)
	ADD	HL,BC
	LD	(_x_offset),HL
;  101				if (x_offset > 2880) { 
	LD	BC,(_x_offset)
	LD	HL,2880
	OR	A,A
	SBC	HL,BC
	JR	NC,L_27
;  102					(x_offset = 2880);
	LD	BC,2880
	LD	(_x_offset),BC
;  103				}
;  104			}
;  105		}
L_27:
;  106		if (kb_Data[7] & kb_Up) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_31
;  107				collisionup();
	CALL	_collisionup
;  108				if (goup == 1){
	LD	BC,1
	LD	HL,(_goup)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_31
;  109					(playerface = 2);
	LD	BC,2
	LD	(_playerface),BC
;  110				(y_offset = (y_offset - mapshift));
	LD	HL,(_y_offset)
	LD	BC,(_mapshift)
	OR	A,A
	SBC	HL,BC
	LD	(_y_offset),HL
;  111				if (y_offset > 2016) {
	LD	BC,(_y_offset)
	LD	HL,2016
	OR	A,A
	SBC	HL,BC
	JR	NC,L_31
;  112					(y_offset = 0);
	LD	BC,0
	LD	(_y_offset),BC
;  113				}
;  114			}
;  115		}
L_31:
;  116		if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_32
;  117				collisiondown();
	CALL	_collisiondown
;  118				if (godown == 1){
	LD	BC,1
	LD	HL,(_godown)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_32
;  119					(playerface = 4);
	LD	BC,4
	LD	(_playerface),BC
;  120				(y_offset = (y_offset + mapshift));
	LD	BC,(_y_offset)
	LD	HL,(_mapshift)
	ADD	HL,BC
	LD	(_y_offset),HL
;  121				if (y_offset > 2016) {
	LD	BC,(_y_offset)
	LD	HL,2016
	OR	A,A
	SBC	HL,BC
	JR	NC,L_32
;  122					(y_offset = 2016);
	LD	BC,2016
	LD	(_y_offset),BC
;  123				}
;  124			}
;  125		}
L_32:
;  126		keywait();
	CALL	_keywait
;  127	}
	RET	


;**************************** _mapshifter ***************************
;Name                         Addr/Register   Size   Type
;_keywait                            IMPORT  -----   function
;_godown                             STATIC      3   variable
;_collisiondown                      IMPORT  -----   function
;_y_offset                           IMPORT      3   variable
;_goup                               STATIC      3   variable
;_collisionup                        IMPORT  -----   function
;_goright                            STATIC      3   variable
;_collisionright                     IMPORT  -----   function
;_mapshift                           IMPORT      3   variable
;_x_offset                           IMPORT      3   variable
;_playerface                         STATIC      3   variable
;_goleft                             STATIC      3   variable
;_collisionleft                      IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  128	
;  129	void drawcharacter(void) {
_drawcharacter:
;  130		if (playerface = 1) {
	LD	BC,1
	LD	(_playerface),BC
;  131			gfx_TransparentSprite(player_naked_left,(x_offset/x_offset)+spritexoffset,(y_offset/y_offset) + spriteyoffset);
	LD	HL,(_y_offset)
	LD	BC,(_y_offset)
	CALL	__idivu
	LD	BC,(_x_offset)
	LD	DE,(_spriteyoffset)
	ADD	HL,DE
	PUSH	HL
	LD	HL,(_x_offset)
	CALL	__idivu
	LD	BC,(_spritexoffset)
	ADD	HL,BC
	PUSH	HL
	LD	BC,_player_naked_left_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  132		}
;  133		else if (playerface = 2) {
;  134			gfx_TransparentSprite(player_naked_up,(x_offset/x_offset)+spritexoffset,(y_offset/y_offset) + spriteyoffset);
;  135		}
;  136		else if (playerface = 3) {
;  137			gfx_TransparentSprite(player_naked_right,(x_offset/x_offset)+spritexoffset,(y_offset/y_offset) + spriteyoffset);
;  138		}
;  139		else if (playerface = 4) {
;  140			gfx_TransparentSprite(player_naked_down,(x_offset/x_offset)+spritexoffset,(y_offset/y_offset) + spriteyoffset);
;  141		}
L_41:
;  142	
;  143	drawhelmet();
	CALL	_drawhelmet
;  144	drawchestplate();
	CALL	_drawchestplate
;  145	drawboot();
	CALL	_drawboot
;  146	gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  147	}
	RET	


;**************************** _drawcharacter ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_drawboot                           IMPORT  -----   function
;_drawchestplate                     IMPORT  -----   function
;_drawhelmet                         IMPORT  -----   function
;_player_naked_down_data             IMPORT   1026   variable
;_player_naked_right_data            IMPORT   1026   variable
;_player_naked_up_data               IMPORT   1026   variable
;_player_naked_left_data             IMPORT   1026   variable
;_spritexoffset                      STATIC      3   variable
;_x_offset                           IMPORT      3   variable
;_spriteyoffset                      STATIC      3   variable
;_y_offset                           IMPORT      3   variable
;_gfx_TransparentSprite              IMPORT  -----   function
;_playerface                         STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  148	
;  149	
;  150	
;  151	void drawhelmet(void) {}
_drawhelmet:
	RET	


;**************************** _drawhelmet ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  152	void drawchestplate(void) {}
_drawchestplate:
	RET	


;**************************** _drawchestplate ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  153	void drawboot(void) {}
_drawboot:
	RET	


;**************************** _drawboot ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  154	
;  155	
;  156	void drawenemies(void) {}
_drawenemies:
	RET	


;**************************** _drawenemies ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	XREF _tilemap:ROM
	XREF _player_setup:ROM
	XREF _mapshift:ROM
	XREF _y_offset:ROM
	XREF _x_offset:ROM
	XREF _textcolor:ROM
	XREF _menuyes:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintString:ROM
	XREF _gfx_PrintUInt:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _tiles_gfx_pal:ROM
	XREF _player_naked_right_data:ROM
	XREF _player_naked_left_data:ROM
	XREF _player_naked_up_data:ROM
	XREF _player_naked_down_data:ROM
	XREF _collisionright:ROM
	XREF _collisionleft:ROM
	XREF _collisiondown:ROM
	XREF _collisionup:ROM
	XREF _keywait:ROM
	XREF __idivu:ROM
	XREF __frameset:ROM
	XDEF _drawenemies
	XDEF _drawboot
	XDEF _drawchestplate
	XDEF _drawhelmet
	XDEF _drawcharacter
	XDEF _mapshifter
	XDEF _drawmap
	XDEF _setmapshift
	XDEF _maingameloop
	XDEF _playerface
	XDEF _spriteyoffset
	XDEF _spritexoffset
	XDEF _godown
	XDEF _goup
	XDEF _goright
	XDEF _goleft
	END
