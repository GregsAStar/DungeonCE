; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\..\..\..\..\PIEMAN~1\DESKTOP\CECDEV\CC22\SRC\MAINGAMELOOP.C"
	.assume ADL=1
	SEGMENT BSS
_tilemap:
	DS	18
;    1	#include "menuandeditfunctions.h"
;    2	#include "maingameloop.h"
;    3	#include "gfx/dungeon_gfx.h"
;    4	#include "gfx/tiles_gfx.h"
;    5	
;    6	#include <stdbool.h>
;    7	#include <stddef.h>
;    8	#include <stdint.h>
;    9	#include <tice.h>
;   10	
;   11	#include <math.h>
;   12	#include <setjmp.h>
;   13	#include <fileioc.h>
;   14	#include <stdio.h>
;   15	#include <stdlib.h>
;   16	#include <string.h>
;   17	#include <graphx.h>
;   18	#include <keypadc.h>
;   19	
;   20	
;   21	extern uint8_t tilemap_map[];
;   22	extern unsigned int x_offset;
;   23	extern unsigned int y_offset;
;   24	
;   25	gfx_tilemap_t tilemap;
	SEGMENT CODE
;   26	
;   27	
;   28	void maingameloop(void){
_maingameloop:
;   29			
;   30	/* main with my way
;   31		do{
;   32			if (previousmapindex != currentmapindex) {
;   33				(mappointer = currentmapindex);
;   34				drawmap();
;   35			}
;   36			
;   37			drawenemies();
;   38			
;   39			if ((previouscharx != currentcharx) || (previouschary != currentchary)){
;   40				drawcharacter();
;   41			}
;   42			
;   43		} while (!(kb_Data[6] & kb_Clear));
;   44	}
;   45	*/
;   46	drawmap();
	CALL	_drawmap
;   47		do{
L_1:
;   48		
;   49		} while (!((kb_Data[6] & kb_Clear)||(kb_Data[1] & kb_Del)));
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_3
	LD	A,(16056338)
	AND	A,128
	JR	Z,L_1
L_3:
;   50		return;
;   51	}
	RET	


;**************************** _maingameloop ***************************
;Name                         Addr/Register   Size   Type
;_drawmap                            IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   52	
;   53	
;   54	void drawmap(void) {
_drawmap:
;   55		
;   56		gfx_SetDrawScreen();
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   57		gfx_SetPalette(tiles_gfx_pal, sizeof_tiles_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,_tiles_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   58		gfx_SetColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   59		gfx_Tilemap(&tilemap, x_offset, y_offset);
	LD	BC,(_y_offset)
	PUSH	BC
	LD	BC,(_x_offset)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;   60		//gfx_PrintStringXY("x offset:", 8, 277);
;   61		//gfx_PrintUInt(x_offset, 4);
;   62		//gfx_PrintString(" y offset:");
;   63		//gfx_PrintUInt(y_offset, 4);
;   64		
;   65		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   66	}
	RET	


;**************************** _drawmap ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_tilemap                            STATIC     18   variable
;_x_offset                           IMPORT      3   variable
;_y_offset                           IMPORT      3   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_tiles_gfx_pal                      IMPORT    512   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   67	
;   68	void drawcharacter(void) {}
_drawcharacter:
	RET	


;**************************** _drawcharacter ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   69	
;   70	
;   71	void drawenemies(void) {}
_drawenemies:
	RET	


;**************************** _drawenemies ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	XREF _y_offset:ROM
	XREF _x_offset:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _tiles_gfx_pal:ROM
	XDEF _drawenemies
	XDEF _drawcharacter
	XDEF _drawmap
	XDEF _maingameloop
	XDEF _tilemap
	END
