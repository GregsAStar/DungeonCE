; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optspeed -noreduceopt -peephole -globalopt
; -localcse -const=ROM 
	FILE	"..\..\..\..\..\PIEMAN~1\DESKTOP\CECDEV\CC22\SRC\MAINGAMELOOP.C"
	.assume ADL=1
	SEGMENT BSS
_goleft:
	DS	3
_goright:
	DS	3
_goup:
	DS	3
_godown:
	DS	3
_playerface:
	DS	3
;    1	#include "menuandeditfunctions.h"
;    2	#include "maingameloop.h"
;    3	#include "collisiondetection.h"
;    4	#include "gfx/dungeon_gfx.h"
;    5	#include "gfx/tiles_gfx.h"
;    6	
;    7	#include <stdbool.h>
;    8	#include <stddef.h>
;    9	#include <stdint.h>
;   10	#include <tice.h>
;   11	
;   12	#include <math.h>
;   13	#include <setjmp.h>
;   14	#include <fileioc.h>
;   15	#include <stdio.h>
;   16	#include <stdlib.h>
;   17	#include <string.h>
;   18	#include <graphx.h>
;   19	#include <keypadc.h>
;   20	
;   21	int goleft;
;   22	int goright;
;   23	int goup;
;   24	int godown;
;   25	//1=left,2=up,3=right,4=down
;   26	int playerface;
	SEGMENT CODE
;   27	
;   28	extern int menuyes;
;   29	extern int textcolor;
;   30	extern uint8_t tilemap_map[];
;   31	extern unsigned int x_offset;
;   32	extern unsigned int y_offset;
;   33	extern int mapshift;
;   34	
;   35	extern gfx_tilemap_t tilemap;
;   36	
;   37	void maingameloop(void){
_maingameloop:
;   38	
;   39		do{
L_1:
;   40			(goleft = 0);
	LD	BC,0
	LD	(_goleft),BC
;   41			(goright = 0);
	LD	(_goright),BC
;   42			(goup = 0);
	LD	(_goup),BC
;   43			(godown = 0);
	LD	(_godown),BC
;   44			
;   45			drawmap();
	CALL	_drawmap
;   46			//drawcharacter();
;   47			mapshifter();
	CALL	_mapshifter
;   48		
;   49		} while (!((kb_Data[6] & kb_Clear)||(kb_Data[1] & kb_Yequ)));
	LD	A,(16056348)
	AND	A,64
	JR	NZ,L_3
	LD	A,(16056338)
	AND	A,16
	JR	Z,L_1
L_3:
;   50		menuyes = 3;
	LD	BC,3
	LD	(_menuyes),BC
;   51	}
	RET	


;**************************** _maingameloop ***************************
;Name                         Addr/Register   Size   Type
;_menuyes                            IMPORT      3   variable
;_mapshifter                         IMPORT  -----   function
;_drawmap                            IMPORT  -----   function
;_godown                             STATIC      3   variable
;_goup                               STATIC      3   variable
;_goright                            STATIC      3   variable
;_goleft                             STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   52	
;   53	
;   54	void drawmap(void) {
_drawmap:
;   55	
;   56		gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   57		gfx_SetPalette(tiles_gfx_pal, sizeof_tiles_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,_tiles_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   58		gfx_Tilemap(&tilemap, x_offset, y_offset);
	LD	BC,(_y_offset)
	PUSH	BC
	LD	BC,(_x_offset)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;   59		gfx_SetColor(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   60		gfx_FillRectangle(0,224,320,16);
	LD	BC,16
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,224
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   61		gfx_SetTextFGColor(textcolor);
	LD	A,(_textcolor)
	LD	C,A
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   62		gfx_PrintStringXY("x offset:", 8, 224);
	LD	BC,224
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,L__3
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   63		gfx_PrintUInt(x_offset, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,(_x_offset)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;   64		gfx_PrintString(" y offset:");
	LD	BC,L__4
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;   65		gfx_PrintUInt(y_offset, 4);
	LD	BC,4
	PUSH	BC
	LD	BC,(_y_offset)
	PUSH	BC
	CALL	_gfx_PrintUInt
	POP	BC
	POP	BC
;   66		gfx_PrintString("pface");
	LD	BC,L__5
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;   67		gfx_PrintInt(playerface,1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_playerface)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
;   68		gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   69	}
	RET	


;**************************** _drawmap ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SwapDraw                       IMPORT  -----   function
;_playerface                         STATIC      3   variable
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_PrintString                    IMPORT  -----   function
;_gfx_PrintUInt                      IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_textcolor                          IMPORT      3   variable
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_tilemap                            IMPORT     18   variable
;_x_offset                           IMPORT      3   variable
;_y_offset                           IMPORT      3   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_tiles_gfx_pal                      IMPORT    512   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__3:
	DB	"x offset:"
	DB	0
L__4:
	DB	" y offset:"
	DB	0
L__5:
	DB	"pface"
	DB	0
	SEGMENT CODE
;   70	
;   71	void mapshifter(void) {
_mapshifter:
;   72		if (kb_Data[7] & kb_Left) {
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_13
;   73			collisionleft();
	CALL	_collisionleft
;   74			if (goleft == 1) {
	LD	BC,1
	LD	HL,(_goleft)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_13
;   75				(playerface = 1);
	LD	(_playerface),BC
;   76				if (x_offset  == 0) {
	LD	HL,(_x_offset)
	LD	BC,0
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_7
;   77					(x_offset = 0);
	LD	(_x_offset),BC
;   78				}
;   79				else {
	JR	L_13
L_7:
;   80					(x_offset = (x_offset - mapshift));
	LD	HL,(_x_offset)
	LD	BC,(_mapshift)
	OR	A,A
	SBC	HL,BC
	LD	(_x_offset),HL
;   81				}
;   82			}
;   83		}
L_13:
;   84		if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_17
;   85			collisionright();
	CALL	_collisionright
;   86			if (goright == 1){
	LD	BC,1
	LD	HL,(_goright)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_17
;   87				(playerface = 3);
	LD	BC,3
	LD	(_playerface),BC
;   88				(x_offset = (x_offset + mapshift));
	LD	BC,(_x_offset)
	LD	HL,(_mapshift)
	ADD	HL,BC
	LD	(_x_offset),HL
;   89				if (x_offset > 2880) { 
	LD	BC,(_x_offset)
	LD	HL,2880
	OR	A,A
	SBC	HL,BC
	JR	NC,L_17
;   90					(x_offset = 2880);
	LD	BC,2880
	LD	(_x_offset),BC
;   91				}
;   92			}
;   93		}
L_17:
;   94		if (kb_Data[7] & kb_Up) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_21
;   95				collisionup();
	CALL	_collisionup
;   96				if (goup == 1){
	LD	BC,1
	LD	HL,(_goup)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_21
;   97					(playerface = 2);
	LD	BC,2
	LD	(_playerface),BC
;   98				(y_offset = (y_offset - mapshift));
	LD	HL,(_y_offset)
	LD	BC,(_mapshift)
	OR	A,A
	SBC	HL,BC
	LD	(_y_offset),HL
;   99				if (y_offset == 16777184) {
	LD	BC,(_y_offset)
	XOR	A,A
	LD	E,A
	LD	HL,BC
	LD	BC,16777184
	XOR	A,A
	CALL	__lcmps
	JR	NZ,L_21
;  100					(y_offset = 0);
	LD	BC,0
	LD	(_y_offset),BC
;  101				}
;  102			}
;  103			}
L_21:
;  104		if (kb_Data[7] & kb_Down) {
	LD	A,(16056350)
	AND	A,1
	JR	Z,L_22
;  105				collisiondown();
	CALL	_collisiondown
;  106				if (godown == 1){
	LD	BC,1
	LD	HL,(_godown)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_22
;  107					(playerface = 4);
	LD	BC,4
	LD	(_playerface),BC
;  108				(y_offset = (y_offset + mapshift));
	LD	BC,(_y_offset)
	LD	HL,(_mapshift)
	ADD	HL,BC
	LD	(_y_offset),HL
;  109				if (y_offset > 2016) {
	LD	BC,(_y_offset)
	LD	HL,2016
	OR	A,A
	SBC	HL,BC
	JR	NC,L_22
;  110					(y_offset = 2016);
	LD	BC,2016
	LD	(_y_offset),BC
;  111				}
;  112			}
;  113		}
;  114	}
L_22:
	RET	


;**************************** _mapshifter ***************************
;Name                         Addr/Register   Size   Type
;_godown                             STATIC      3   variable
;_collisiondown                      IMPORT  -----   function
;_y_offset                           IMPORT      3   variable
;_goup                               STATIC      3   variable
;_collisionup                        IMPORT  -----   function
;_goright                            STATIC      3   variable
;_collisionright                     IMPORT  -----   function
;_mapshift                           IMPORT      3   variable
;_x_offset                           IMPORT      3   variable
;_playerface                         STATIC      3   variable
;_goleft                             STATIC      3   variable
;_collisionleft                      IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  115	
;  116	void drawcharacter(void) {
_drawcharacter:
;  117		gfx_TransparentSprite(player_naked_down,x_offset + 32,y_offset + 32);
	LD	IY,(_y_offset)
	LEA	BC,IY+32
	PUSH	BC
	LD	IY,(_x_offset)
	LEA	BC,IY+32
	PUSH	BC
	LD	BC,_player_naked_down_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  118	}
	RET	


;**************************** _drawcharacter ***************************
;Name                         Addr/Register   Size   Type
;_player_naked_down_data             IMPORT   1026   variable
;_x_offset                           IMPORT      3   variable
;_y_offset                           IMPORT      3   variable
;_gfx_TransparentSprite              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  119	
;  120	
;  121	void drawenemies(void) {}
_drawenemies:
	RET	


;**************************** _drawenemies ***************************
;Name                         Addr/Register   Size   Type


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	XREF _tilemap:ROM
	XREF _mapshift:ROM
	XREF _y_offset:ROM
	XREF _x_offset:ROM
	XREF _textcolor:ROM
	XREF _menuyes:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintString:ROM
	XREF _gfx_PrintUInt:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_Tilemap:ROM
	XREF _tiles_gfx_pal:ROM
	XREF _player_naked_down_data:ROM
	XREF _collisionright:ROM
	XREF _collisionleft:ROM
	XREF _collisiondown:ROM
	XREF _collisionup:ROM
	XREF __lcmps:ROM
	XDEF _drawenemies
	XDEF _drawcharacter
	XDEF _mapshifter
	XDEF _drawmap
	XDEF _maingameloop
	XDEF _playerface
	XDEF _godown
	XDEF _goup
	XDEF _goright
	XDEF _goleft
	END
